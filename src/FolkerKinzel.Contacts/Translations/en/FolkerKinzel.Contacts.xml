<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>FolkerKinzel.Contacts</name>
  </assembly>
  <members>
    <member name="T:FolkerKinzel.Contacts.Address">
      <summary>Encapsulates address data.</summary>
    </member>
    <member name="T:FolkerKinzel.Contacts.Address.Prop">
      <summary />
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.#ctor">
      <summary>Initializes an empty instance of the <see cref="T:FolkerKinzel.Contacts.Address" /> class.</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.#ctor(FolkerKinzel.Contacts.Address)">
      <summary />
      <param name="source" />
    </member>
    <member name="P:FolkerKinzel.Contacts.Address.Street">
      <summary>Street (+ house number)</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Address.City">
      <summary>City</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Address.PostalCode">
      <summary>Postal code</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Address.State">
      <summary>State</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Address.Country">
      <summary>Country</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of the object instance.</summary>
      <returns>The content of the object instance as <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.op_Equality(FolkerKinzel.Contacts.Address,FolkerKinzel.Contacts.Address)">
      <summary>Overloads the == operator.</summary>
      <remarks>Compares two <see cref="T:FolkerKinzel.Contacts.Address" /> objects  to determine whether they are equal.</remarks>
      <param name="address1">Left operand.</param>
      <param name="address2">Right operand.</param>
      <returns>
        <c>true</c> if <paramref name="address1" /> and <paramref name="address2" /> are equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.op_Inequality(FolkerKinzel.Contacts.Address,FolkerKinzel.Contacts.Address)">
      <summary>Overloads the != operator.</summary>
      <remarks>Compares two <see cref="T:FolkerKinzel.Contacts.Address" /> objects  to determine whether they are not equal.</remarks>
      <param name="address1">Left operand.</param>
      <param name="address2">Right operand.</param>
      <returns>
        <c>true</c> if <paramref name="address1" /> and <paramref name="address2" /> are not equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.DescribesForeignIdentity(FolkerKinzel.Contacts.Address)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.SupplementWith(FolkerKinzel.Contacts.Address)">
      <inheritdoc />
    </member>
    <member name="P:FolkerKinzel.Contacts.Address.IsEmpty">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.Clean">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.Clone">
      <summary>Creates a deep copy of the object instance.</summary>
      <returns>Deep copy of the object instance.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.Equals(FolkerKinzel.Contacts.Address)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.CompareBoolean(FolkerKinzel.Contacts.Address)">
      <summary />
      <param name="other" />
      <returns />
    </member>
    <member name="M:FolkerKinzel.Contacts.Address.GetHashCode">
      <inheritdoc />
    </member>
    <member name="T:FolkerKinzel.Contacts.Contact">
      <summary>Data model for storing contact data.</summary>
      <example>
        <para> Initialize <see cref="T:FolkerKinzel.Contacts.Contact" /> objects: </para>
        <code language="cs" source="..\Examples\ContactExample.cs" />
      </example>
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.#ctor">
      <summary>Initializes an empty instance of the <see cref="T:FolkerKinzel.Contacts.Contact" /> class.</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.#ctor(FolkerKinzel.Contacts.Contact)">
      <summary />
      <param name="source" />
    </member>
    <member name="P:FolkerKinzel.Contacts.Contact.DisplayName">
      <summary>Display name</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Contact.Person">
      <summary>Personal data</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Contact.EmailAddresses">
      <summary>Email addresses</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Contact.InstantMessengerHandles">
      <summary>Instant messenger handles</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Contact.PhoneNumbers">
      <summary>Phone numbers</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Contact.AddressHome">
      <summary>Postal address (personal)</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Contact.Work">
      <summary>Organizational data</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Contact.WebPagePersonal">
      <summary>Personal homepage</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Contact.WebPageWork">
      <summary>Business homepage</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Contact.Comment">
      <summary>Notes</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Contact.TimeStamp">
      <summary>Last Changed</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Contact.IsEmpty">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.Clean">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.Clone">
      <summary>Creates a deep copy of the object instance.</summary>
      <returns>Deep copy of the object instance.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.System#Collections#Generic#IEnumerable{FolkerKinzel#Contacts#Contact}#GetEnumerator">
      <summary>Returns an enumerator, which returns the executing instance of the <see cref="T:FolkerKinzel.Contacts.Contact" /> class.</summary>
      <returns>An enumerator, which returns the executing instance of the <see cref="T:FolkerKinzel.Contacts.Contact" /> class.</returns>
      <remarks>This implementation allows to pass a single <see cref="T:FolkerKinzel.Contacts.Contact" /> object as an argument to a method parameter of type <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;Contact&gt;</see>.</remarks>
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator, which returns the executing instance of the <see cref="T:FolkerKinzel.Contacts.Contact" /> class.</summary>
      <returns>An enumerator, which returns the executing instance of the <see cref="T:FolkerKinzel.Contacts.Contact" /> class.</returns>
      <remarks>This implementation allows to pass a single <see cref="T:FolkerKinzel.Contacts.Contact" /> object as an argument to a method parameter of type <see cref="T:System.Collections.IEnumerable" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.Equals(FolkerKinzel.Contacts.Contact)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.CompareBoolean(FolkerKinzel.Contacts.Contact)">
      <summary />
      <param name="other" />
      <returns />
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.DescribesForeignIdentity(FolkerKinzel.Contacts.Contact)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.SupplementWith(FolkerKinzel.Contacts.Contact)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of the object instance.</summary>
      <returns>The content of the object instance as <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.op_Equality(FolkerKinzel.Contacts.Contact,FolkerKinzel.Contacts.Contact)">
      <summary>Overloads the == operator.</summary>
      <remarks>Compares two <see cref="T:FolkerKinzel.Contacts.Contact" /> objects  to determine whether they are equal.</remarks>
      <param name="contact1">Left operand.</param>
      <param name="contact2">Right operand.</param>
      <returns>
        <c>true</c> if <paramref name="contact1" /> and <paramref name="contact2" />  are equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Contact.op_Inequality(FolkerKinzel.Contacts.Contact,FolkerKinzel.Contacts.Contact)">
      <summary>Overloads the != operator.</summary>
      <remarks>Compares two <see cref="T:FolkerKinzel.Contacts.Contact" /> objects  to determine whether they are not equal.</remarks>
      <param name="contact1">Left operand.</param>
      <param name="contact2">Right operand.</param>
      <returns>
        <c>true</c> if <paramref name="contact1" /> and <paramref name="contact2" />  are not equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="T:FolkerKinzel.Contacts.ICleanable">
      <summary>Interface, that enables the implementing class to clean itself of data garbage.</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.ICleanable.Clean">
      <summary>Cleans the data stored in the object: Removes e.g. empty sub-objects or superfluous white space.</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.ICleanable.IsEmpty">
      <summary>Returns <c>true</c> if the object does not contain any usable data, otherwise <c>false</c>.</summary>
    </member>
    <member name="T:FolkerKinzel.Contacts.MergeableObject`1">
      <summary>Abstract base class, which provides methods that enable instances of derived classes to merge their data with one another.</summary>
      <typeparam name="T">Generic type parameter that represents a derived class.</typeparam>
    </member>
    <member name="P:FolkerKinzel.Contacts.MergeableObject`1.IsEmpty">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.MergeableObject`1.Clean">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.MergeableObject`1.IsMergeableWith(`0)">
      <summary>Determines whether there is nothing to prevent the data from <paramref name="other" /> from being merged with those of the current instance.</summary>
      <param name="other">Another <see cref="T:FolkerKinzel.Contacts.MergeableObject`1" /> or <c>null</c>.</param>
      <returns>
        <c>true</c> if there is nothing to prevent a merging with <paramref name="other" />, otherwise <c>false</c>.</returns>
      <remarks>
        <para>
If <paramref name="other" /> is <c>null</c>
or <see cref="P:FolkerKinzel.Contacts.MergeableObject`1.IsEmpty" />, the method returns <c>true</c>. If the property <see cref="P:FolkerKinzel.Contacts.MergeableObject`1.IsEmpty" /> of the current instance returns <c>true</c>, there is also nothing that prevents  a merging of the data from <paramref name="other" /> with those of the current instance. Therefore the method returns <c>true</c> in this case as well.
</para>
        <para>
The method can find suitable candidates for a merging of their data ("doublets"); however, it cannot determine whether the merging of the data makes sense. It would be a good practice to let the users of the application decide that.
</para>
      </remarks>
    </member>
    <member name="M:FolkerKinzel.Contacts.MergeableObject`1.AreMergeable(`0,`0)">
      <summary>Examines whether there is nothing to prevent the merging of the data from <paramref name="mergeable1" /> and <paramref name="mergeable2" />.</summary>
      <param name="mergeable1">The first object to be examined.</param>
      <param name="mergeable2">The second object to be examined.</param>
      <returns>
        <c>true</c> if there is nothing to prevent a merging of <paramref name="mergeable1" /> and <paramref name="mergeable2" />, otherwise <c>false</c>.</returns>
      <remarks>
        <para>
If one of the objects to be examined is <c>null</c> or <see cref="P:FolkerKinzel.Contacts.MergeableObject`1.IsEmpty" />, the method returns <c>true</c>.
</para>
        <para>
The method can find suitable candidates for a merging of their data ("doublets"); however, it cannot determine whether the merging of the data makes sense. It would be a good practice to let the users of the application decide that.
</para>
      </remarks>
    </member>
    <member name="M:FolkerKinzel.Contacts.MergeableObject`1.Merge(`0)">
      <summary>Supplements the executing instance with the data from <paramref name="source" />. No existing data will be overwritten in the current instance.</summary>
      <param name="source">The source object whose data is used to supplement the executing instance.</param>
      <returns>A reference to the executing instance in order to be able to chain calls.</returns>
      <remarks>
        <para>
The method does not check whether it makes sense to supplement the data of the current instance with those from <paramref name="source" />. Check this beforehand with <see cref="M:FolkerKinzel.Contacts.MergeableObject`1.IsMergeableWith(`0)" /> and have the result of the check confirmed by the users of the application, if possible.
</para>
        <para>
If <paramref name="source" /> is <c>null</c> or <see cref="P:FolkerKinzel.Contacts.MergeableObject`1.IsEmpty" /> no data will be copied.
</para>
        <para>
When merging two <see cref="T:FolkerKinzel.Contacts.MergeableObject`1" /> instances the result depends on which of the two instances the method is called on. Preserving the data of the instance on which the method is called has priority. It is the responsibility of the executing application to call the method on the more appropriate of the two instances.
</para>
      </remarks>
    </member>
    <member name="M:FolkerKinzel.Contacts.MergeableObject`1.SupplementWith(`0)">
      <summary>Supplements the executing instance with the data from <paramref name="source" /> without overwriting existing data.</summary>
      <param name="source">The source object. (Never <c>null</c> or <see cref="P:FolkerKinzel.Contacts.MergeableObject`1.IsEmpty" />.)</param>
      <remarks>
        <note type="inherit">
When overwriting the method in inheriting classes, the promise must be kept that the method will not overwrite any existing data!
</note>
      </remarks>
    </member>
    <member name="M:FolkerKinzel.Contacts.MergeableObject`1.DescribesForeignIdentity(`0)">
      <summary>Examines <paramref name="other" /> to see whether it describes a foreign identity and therefore cannot be merged with the current instance.</summary>
      <param name="other">The object to be examined. (Never <c>null</c> or <see cref="P:FolkerKinzel.Contacts.MergeableObject`1.IsEmpty" />.)</param>
      <returns>The method may only return <c>true</c> if the values of the properties of <paramref name="other" /> make it impossible to merge <paramref name="other" /> with the current instance, otherwise <c>false</c>.</returns>
    </member>
    <member name="T:FolkerKinzel.Contacts.Name">
      <summary>Encapsulates information about a persons name.</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.#ctor">
      <summary>Initializes an empty instance of the <see cref="T:FolkerKinzel.Contacts.Name" /> class.</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.#ctor(FolkerKinzel.Contacts.Name)">
      <summary />
      <param name="other" />
    </member>
    <member name="P:FolkerKinzel.Contacts.Name.LastName">
      <summary>Last name</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Name.FirstName">
      <summary>First name</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Name.MiddleName">
      <summary>Middle name</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Name.Prefix">
      <summary>Name prefix</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Name.Suffix">
      <summary>Name suffix</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of the object instance.</summary>
      <returns>The content of the object instance as <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.op_Equality(FolkerKinzel.Contacts.Name,FolkerKinzel.Contacts.Name)">
      <summary>Overloads the == operator.</summary>
      <remarks>Compares two <see cref="T:FolkerKinzel.Contacts.Name" /> objects  to determine whether they are equal.</remarks>
      <param name="name1">Left operand.</param>
      <param name="name2">Right operand.</param>
      <returns>
        <c>true</c> if <paramref name="name1" /> and <paramref name="name2" /> are equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.op_Inequality(FolkerKinzel.Contacts.Name,FolkerKinzel.Contacts.Name)">
      <summary>Overloads the != operator.</summary>
      <remarks>Compares two <see cref="T:FolkerKinzel.Contacts.Name" /> objects  to determine whether they are not equal.</remarks>
      <param name="name1">Left operand.</param>
      <param name="name2">Right operand.</param>
      <returns>
        <c>true</c> if <paramref name="name1" /> and <paramref name="name2" /> are not equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.DescribesForeignIdentity(FolkerKinzel.Contacts.Name)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.SupplementWith(FolkerKinzel.Contacts.Name)">
      <inheritdoc />
    </member>
    <member name="P:FolkerKinzel.Contacts.Name.IsEmpty">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.Clean">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.Clone">
      <summary>Creates a deep copy of the object instance.</summary>
      <returns>Deep copy of the object instance.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.Equals(FolkerKinzel.Contacts.Name)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.CompareBoolean(FolkerKinzel.Contacts.Name)">
      <summary />
      <param name="other" />
      <returns />
    </member>
    <member name="M:FolkerKinzel.Contacts.Name.GetHashCode">
      <inheritdoc />
    </member>
    <member name="T:FolkerKinzel.Contacts.Person">
      <summary>Encapsulates personal data.</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.#ctor">
      <summary>Initializes an empty instance of the <see cref="T:FolkerKinzel.Contacts.Person" /> class.</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.#ctor(FolkerKinzel.Contacts.Person)">
      <summary />
      <param name="source" />
    </member>
    <member name="P:FolkerKinzel.Contacts.Person.Name">
      <summary>Name of the person</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Person.NickName">
      <summary>Nickname</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Person.Gender">
      <summary>Gender</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Person.BirthDay">
      <summary>Birthday</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Person.Spouse">
      <summary>Spouse's name</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Person.Anniversary">
      <summary>Anniversary</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of the <see cref="T:FolkerKinzel.Contacts.Person" /> object.</summary>
      <returns>The content of the <see cref="T:FolkerKinzel.Contacts.Person" /> object as <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.op_Equality(FolkerKinzel.Contacts.Person,FolkerKinzel.Contacts.Person)">
      <summary>Overloads the == operator.</summary>
      <remarks>Compares two <see cref="T:FolkerKinzel.Contacts.Person" /> objects  to determine whether they are equal.</remarks>
      <param name="person1">Left operand.</param>
      <param name="person2">Right operand.</param>
      <returns>
        <c>true</c> if <paramref name="person1" /> and <paramref name="person2" /> are equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.op_Inequality(FolkerKinzel.Contacts.Person,FolkerKinzel.Contacts.Person)">
      <summary>Overloads the != operator.</summary>
      <remarks>Compares two <see cref="T:FolkerKinzel.Contacts.Person" /> objects  to determine whether they are not equal.</remarks>
      <param name="person1">Left operand.</param>
      <param name="person2">Right operand.</param>
      <returns>
        <c>true</c> if <paramref name="person1" /> and <paramref name="person2" /> are not equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.DescribesForeignIdentity(FolkerKinzel.Contacts.Person)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.SupplementWith(FolkerKinzel.Contacts.Person)">
      <inheritdoc />
    </member>
    <member name="P:FolkerKinzel.Contacts.Person.IsEmpty">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.Clean">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.Clone">
      <summary>Creates a deep copy of the object instance.</summary>
      <returns>Deep copy of the object instance.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.Equals(FolkerKinzel.Contacts.Person)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.CompareBoolean(FolkerKinzel.Contacts.Person)">
      <summary />
      <param name="other" />
      <returns />
    </member>
    <member name="M:FolkerKinzel.Contacts.Person.GetHashCode">
      <inheritdoc />
    </member>
    <member name="T:FolkerKinzel.Contacts.PhoneNumber">
      <summary>Encapsulates information about a phone number.</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.#ctor">
      <summary>Initializes an empty instance of the <see cref="T:FolkerKinzel.Contacts.PhoneNumber" /> class.</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Initializes a <see cref="T:FolkerKinzel.Contacts.PhoneNumber" /> object with the phone number to be encapsulated and optional flags, that describe it in more detail.</summary>
      <param name="value">The phone number.</param>
      <param name="isWork">
        <c>true</c> indicates, that it is a business phone number.</param>
      <param name="isMobile">
        <c>true</c> indicates, that it is a mobile phone number.</param>
      <param name="isFax">
        <c>true</c> indicates, that it is a fax number.</param>
    </member>
    <member name="P:FolkerKinzel.Contacts.PhoneNumber.Value">
      <summary>Phone number</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.PhoneNumber.IsWork">
      <summary>
        <c>true</c> indicates, that it is a business phone number.</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.PhoneNumber.IsMobile">
      <summary>
        <c>true</c> indicates, that it is a mobile phone number.</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.PhoneNumber.IsFax">
      <summary>
        <c>true</c> indicates, that it is a fax number.</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of the object instance.</summary>
      <returns>The content of the object instance as <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.op_Equality(FolkerKinzel.Contacts.PhoneNumber,FolkerKinzel.Contacts.PhoneNumber)">
      <summary>Overloads the == operator.</summary>
      <remarks>Compares two <see cref="T:FolkerKinzel.Contacts.PhoneNumber" /> objects  to determine whether they are equal.</remarks>
      <param name="phone1">Left operand.</param>
      <param name="phone2">Right operand.</param>
      <returns>
        <c>true</c> if <paramref name="phone1" /> and <paramref name="phone2" /> are equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.op_Inequality(FolkerKinzel.Contacts.PhoneNumber,FolkerKinzel.Contacts.PhoneNumber)">
      <summary>Overloads the != operator.</summary>
      <remarks>Compares two <see cref="T:FolkerKinzel.Contacts.PhoneNumber" /> objects  to determine whether they are not equal.</remarks>
      <param name="phone1">Left operand.</param>
      <param name="phone2">Right operand.</param>
      <returns>
        <c>true</c> if <paramref name="phone1" /> and <paramref name="phone2" /> are not equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.DescribesForeignIdentity(FolkerKinzel.Contacts.PhoneNumber)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.SupplementWith(FolkerKinzel.Contacts.PhoneNumber)">
      <inheritdoc />
    </member>
    <member name="P:FolkerKinzel.Contacts.PhoneNumber.IsEmpty">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.Clean">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.System#Collections#Generic#IEnumerable{FolkerKinzel#Contacts#PhoneNumber}#GetEnumerator">
      <summary>Returns an enumerator, which returns the executing instance of the <see cref="T:FolkerKinzel.Contacts.PhoneNumber" /> class.</summary>
      <returns>An enumerator, which returns the executing instance of the <see cref="T:FolkerKinzel.Contacts.PhoneNumber" /> class.</returns>
      <remarks>This implementation allows to pass a single <see cref="T:FolkerKinzel.Contacts.PhoneNumber" /> object as an argument to a method parameter of type <see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable&lt;PhoneNumber&gt;</see>.</remarks>
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator, which returns the executing instance of the <see cref="T:FolkerKinzel.Contacts.PhoneNumber" /> class.</summary>
      <returns>An enumerator, which returns the executing instance of the <see cref="T:FolkerKinzel.Contacts.PhoneNumber" /> class.</returns>
      <remarks>This implementation allows to pass a single <see cref="T:FolkerKinzel.Contacts.PhoneNumber" /> object as an argument to a method parameter of type <see cref="T:System.Collections.IEnumerable" />.</remarks>
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.Clone">
      <summary>Creates a deep copy of the object instance.</summary>
      <returns>Deep copy of the object instance.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.Equals(FolkerKinzel.Contacts.PhoneNumber)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.CompareBoolean(FolkerKinzel.Contacts.PhoneNumber)">
      <summary />
      <param name="other" />
      <returns />
    </member>
    <member name="M:FolkerKinzel.Contacts.PhoneNumber.GetHashCode">
      <inheritdoc />
    </member>
    <member name="T:FolkerKinzel.Contacts.Resources.Res">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.ResourceManager">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Culture">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.AddressHome">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.AddressWork">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Anniversary">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.BirthDay">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Comment">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Company">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Department">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.DisplayName">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.EmailAddresses">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Fax">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Female">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Gender">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.HomePagePersonal">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.HomePageWork">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.InstantMessengers">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Male">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Name">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.NickName">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Office">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Person">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.PhoneNumbers">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Position">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Spouse">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.TimeStamp">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.Work">
      <summary />
    </member>
    <member name="P:FolkerKinzel.Contacts.Resources.Res.WorkShort">
      <summary />
    </member>
    <member name="T:FolkerKinzel.Contacts.Sex">
      <summary>Named constants for gender.</summary>
    </member>
    <member name="F:FolkerKinzel.Contacts.Sex.Unspecified">
      <summary>The gender is unspecified.</summary>
    </member>
    <member name="F:FolkerKinzel.Contacts.Sex.Female">
      <summary>Female</summary>
    </member>
    <member name="F:FolkerKinzel.Contacts.Sex.Male">
      <summary>Male</summary>
    </member>
    <member name="T:FolkerKinzel.Contacts.Work">
      <summary>Encapsulates data, describing an organization or company, or data, that describes a person's job.</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.#ctor">
      <summary>Initializes an empty instance of the <see cref="T:FolkerKinzel.Contacts.Work" /> class.</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.#ctor(FolkerKinzel.Contacts.Work)">
      <summary />
      <param name="source" />
    </member>
    <member name="P:FolkerKinzel.Contacts.Work.Company">
      <summary>Name of the company or organization</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Work.Department">
      <summary>Department</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Work.Office">
      <summary>Office</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Work.JobTitle">
      <summary>Job title</summary>
    </member>
    <member name="P:FolkerKinzel.Contacts.Work.AddressWork">
      <summary>Postal address of the company or organization</summary>
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of the instance.</summary>
      <returns>The content of the instance as <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.op_Equality(FolkerKinzel.Contacts.Work,FolkerKinzel.Contacts.Work)">
      <summary>Overloads the == operator.</summary>
      <remarks>Compares two <see cref="T:FolkerKinzel.Contacts.Work" /> objects  to determine whether they are equal.</remarks>
      <param name="work1">Left operand.</param>
      <param name="work2">Right operand.</param>
      <returns>
        <c>true</c> if <paramref name="work1" /> and <paramref name="work2" /> are equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.op_Inequality(FolkerKinzel.Contacts.Work,FolkerKinzel.Contacts.Work)">
      <summary>Overloads the != operator.</summary>
      <remarks>Compares two <see cref="T:FolkerKinzel.Contacts.Work" /> objects  to determine whether they are not equal.</remarks>
      <param name="work1">Left operand.</param>
      <param name="work2">Right operand.</param>
      <returns>
        <c>true</c> if <paramref name="work1" /> and <paramref name="work2" /> are not equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.DescribesForeignIdentity(FolkerKinzel.Contacts.Work)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.SupplementWith(FolkerKinzel.Contacts.Work)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.Clean">
      <inheritdoc />
    </member>
    <member name="P:FolkerKinzel.Contacts.Work.IsEmpty">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.Clone">
      <summary>Creates a deep copy of the object instance.</summary>
      <returns>Deep copy of the object instance.</returns>
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.Equals(FolkerKinzel.Contacts.Work)">
      <inheritdoc />
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.CompareBoolean(FolkerKinzel.Contacts.Work)">
      <summary />
      <param name="other" />
      <returns />
    </member>
    <member name="M:FolkerKinzel.Contacts.Work.GetHashCode">
      <inheritdoc />
    </member>
  </members>
</doc>